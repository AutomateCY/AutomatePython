""" --DOC--
-make_minimal(automaton):
will make automaton deterministic and minimize it.
caution: will rename all states.
"""

from deterministic import make_deter


def splitting(auto):
    #-- making 2 groups of states
    #-- final states and non final states
    groups = {state: ('1' if state in auto["final_states"] else '0') for state in auto["states"]}
    size_of_groups = 0
    #print(groups)
    #-- while new groups are created do not stop
    while(size_of_groups != len(set(groups.values()))):
        size_of_groups = len(set(groups.values()))
        temp = dict(groups) #temp copy so groups will not change during operations.
        
        #We need to get the group of successor state for each states for each letter in alphabet
        #we add the successor's group number to the group number of treated state.
        #the concatenation of group numbers makes new group.
        #if states from a same group points to same group for each states, 
        #then the concatenation will make the same new group.
        for (state, group) in groups.items():
            for letter in auto['alphabet']:
            
                try:
                    groups[state] = groups[state] + str (temp.get(auto["transitions"][state].get(letter)[0]))
                except TypeError:
                    groups[state] = groups[state] + "none"
                except KeyError:
                    pass
                #print(groups, "letter:" ,letter)
                #print(temp)
            #print("\n"*2)        
        #print("\n --"*2)
        
        #print(groups)
    #-- rename groups for legibility 
    groups = renumber_groups(groups)
    #print(groups)
    return groups

def renumber_groups(groups):
    group_numbers = {}
    for group in groups.values():
        group_numbers.setdefault(group, len(group_numbers))
    return {q: "q"+str(group_numbers[group]) for (q, group) in groups.items()}


def minimization(auto, groups):

    #-- just replace old states with new ones generated by splitting() function
    auto["states"] = list(set([groups[state] for state in auto["states"]]))
    auto['final_states'] = list(set([groups[state] for state in auto['final_states']]))
    auto['initial_states'] = list(set([groups[state] for state in auto['initial_states']]))
    auto['transitions'] = {groups[q] : trans for (q, trans) in auto['transitions'].items( )}
    for state in auto['transitions']:
        for letter in auto['transitions'][state]:
            auto['transitions'][state][letter][0] = groups[auto['transitions'][state][letter][0]]
    
    
    
    return auto


def make_minimal(auto):
    auto = make_deter(auto)
    return minimization(auto, splitting(auto))
    



#========== TEST RUN ==========#
'''
automaton4 = {
    'name': "automaton2",
    'states': ['q0', 'q1', 'q2', 'q3', 'q4', 'q5', 'q6', 'q7'],
    'alphabet': ['a', 'b', ''],
    'initial_states': ['q0'],
    'final_states': ['q7'],
    'transitions': {
        'q0': {'': ['q1', 'q4']},
        'q1': {'a': ['q2']},
        'q2': {'a': ['q2', 'q3'], 'b':['q2']},
        'q3': {'':['q7']},
        'q4': {'b':['q5']},
        'q5': {'a':['q5'], 'b':['q5','q6']},
        'q6': {'':['q7']}

    }
}

automaton = {'name': 'new automaton1', 
             'states': ['q0', 'q0,q0,q1', 'q0,q1', 'q1', 'q1,q2', 'q2'], 
             'alphabet': ['0', '1', '2'], 
             'initial_states': ['q0'], 
             'final_states': ['q1,q2', 'q2'], 
             'transitions': {
                 'q0': {'0': ['q0,q1'], '1': ['q1']}, 
                 'q1': {'0': ['q0,q1'], '1':['q0,q0,q1'] ,'2': ['q1,q2']}, 
                 'q2': {'0': ['q0'], '1': ['q1']}, 

                 'q0,q1': {'0': ['q0,q1'], '1': ['q1'], '2': ['q1,q2']}, 
                 'q1,q2': {'0': ['q0,q0,q1'], '2': ['q0,q1'], '1': ['q2']}, 
                 'q0,q0,q1': {'0': ['q0,q1'], '1': ['q1'], '2': ['q1,q2']}}}

print(make_minimal(automaton4))
#'''

'''
{'name': 'new automaton1', 
'states': ['q0', 'q1', 'q1', 'q2', 'q3', 'q4'], 
'alphabet': ['0', '1', '2'], 
'initial_states': ['q0'], 
'final_states': ['q3', 'q4'], 
'transitions': {'q0': {'0': ['q1'], '1': ['q2']}, 
                'q2': {'0': ['q1'], '2': ['q3']}, 
                'q4': {'0': ['q0'], '1': ['q2']}, 
                'q1': {'0': ['q1'], '1': ['q2'], '2': ['q3']}, 
                'q3': {'0': ['q1'], '2': ['q3'], '1': ['q2']}}}
'''